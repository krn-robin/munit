#% text_encoding = iso8859_1
_package sw

_pragma(classify_level=debug)
##
## This class extends database_test with specialised behaviour for VMSQL
## database tests.  database_test inherits from this class.
##
def_slotted_exemplar(:vmsql_database_test_helper,
	{
	})
$

_pragma(classify_level=advanced, usage={subclassable})
vmsql_database_test_helper.define_shared_variable(:database_storage_mode, 
	##
	## Can be set to :vmsql in order to create datasets in Postgres.
	##
	:vmds, :private)
$

_pragma(classify_level=advanced, usage={subclassable})
vmsql_database_test_helper.define_shared_variable(:import_vmsql_before_suite?, 
	## Controls whether the VMSQL dump is to be imported as part of the
	## one_time_set_up().  Ignored if import_vmsql_before_each_test? is true.  When
	## both import_vmsql_before_suite? and import_vmsql_before_each_test is set to
	## false then the dump will not be imported from Magik at all.
	_false, :private)
$

_pragma(classify_level=advanced, usage={subclassable})
vmsql_database_test_helper.define_shared_variable(:import_vmsql_before_each_test?, 
	## When this is set to false the postgres dump will be loaded in
	## one_time_set_up.  When set to true the Postgres dump will be loaded before
	## each test, i.e. from the set_up.
	_false, :private)
$

_pragma(classify_level=advanced, usage={subclassable})
vmsql_database_test_helper.define_shared_variable(:vmsql_dump_file_name, 
	## Property list used to specify dump file names for one or more of the
	## vmsql_datasets. If this is not specified then the file name will default to
	## camdb_<dataset name>.dump.
	property_list.new_with(:gis_pg,"camdb_gis.dump",
			       :electricity_pg,"camdb_electricity.dump")
	, :private)
$


_pragma(classify_level=advanced, usage={subclassable})
vmsql_database_test_helper.define_shared_variable(:vmsql_datasets,
	##
	## Specifies the names of datasets which the suite requires to be vmsql
	## datasets.  If dataset managers exist with these names but are not vmsql,
	## then they will be replaced with vmsql datasets.
	##
	{:gis_pg,:electricity_pg}, :private)
$

_pragma(classify_level=advanced, usage={subclassable})
vmsql_database_test_helper.define_shared_variable(:vmds_vmsql_dataset_map,
	##
	##
	property_list.new_with(:gis,:gis_pg,:electricity,:electricity_pg), :private)
$



_pragma(classify_level=basic,topic=MUnit,usage=subclassable)
_method vmsql_database_test_helper.add_vmsql_dataset_to_soc(dataset_name)
	## Add vmsql datasets to soc
	##
	soc_name << soc_name.default(:gis)
	vmsql_dsm << vmsql_manager.new(dataset_name)
	ace_top << gis_program_manager.ace_top_view
	ace_top.switch(:write)
	vmsql_dsm.store_connect_spec(vmsql_manager.default_connect_specification)
	a_soc << gis_program_manager.spatial_object_controller(soc_name)
	cspec << vmsql_dsm.get_connect_spec()
	
	a_soc.add_dataset_manager( vmsql_dsm )
	gis_program_manager.add_dataset(soc_name, dataset_name, :vmsql_manager)
	ace_top.commit()
	ace_top.switch(:readonly)


	_if _self.vmsql_dataset_can_be_opened?(dataset_name)
	_then
		vmsql_dsm.open(cspec)
	_else
		_self.import_vmsql_dataset(vmsql_dsm)
	_endif

_endmethod
$

_method vmsql_database_test_helper.suppress_witterage(suppress?)
	##
	## Method to toggle witterage suppression
	## suppress? should be a boolean indicating whether to suppress or not.
	##
	_if suppress? _is _true
	_then
		output << internal_text_output_stream.new()
	_else
		output << !output!
	_endif
	>> output
_endmethod
$

_private _method vmsql_database_test_helper.prep_vmsql_db()
	##
	## Prepares a VMSQL database to be opened by open_database().  Called
	## from check_correct_database_open() before we do open_database.  The database
	## that will be opened might try to open one or more of the vmsql_datasets. 
	## This method will do basic tests to make sure the datasets can be opened,
	## if they cannot then the dump will be imported upfront.
	##
	_if _self.database_storage_mode _isnt :vmsql
	_then
		_return
	_endif

	_for dataset_name _over _self.vmsql_datasets.fast_elements()
	_loop
		_if gis_program_manager.cached_dataset(dataset_name) _is _unset 
		_then
			_self.add_vmsql_dataset_to_soc(dataset_name)
		_endif
	_endloop
_endmethod
$

_private _method vmsql_database_test_helper.vmsql_dataset_can_be_opened?(dataset_name)
	##
	## Checks whether the vmsql dataset DATASET_NAME will open successfully. Used
	## by prep_vmsql_db() to determine whether the dump should be loaded before
	## opening a database, which may potentially try to open the dataset in
	## question.
	##
	# Creates a database_view, adds dd.ds and checks whether sw_gis!world exists.
	can_open? << _false
	_try _with cond
		view << database_view.new(:readonly,
					  :name,dataset_name,
					  :searchpath, {write_string("/",dataset_name)},
					  :concurrency_mode, :vmsql)
		_protect
			view.add_file("gdb.ds", :mode, :dontcare)
			_if view.collections.includes_key?(:sw_gis!world)
			_then
				can_open? << _true
			_endif
		_protection
			view.discard()
		_endprotect
	_when error
		# Fails to open
	_endtry
	_return can_open?
_endmethod
$

_private _method vmsql_database_test_helper.one_time_set_up_vmsql()
	##
	## Gets called from one_time_set_up() to do one-time setup for VMSQL suites.
	## If the session has a local database open, i.e. hosted on the current
	## machine, then datasets specified in vmsql_datasets will be replaced with
	## equivalent vmsql datasets.  Changes are undone by one_time_tear_down_vmsql().
	## 
	_if _self.database_storage_mode _isnt :vmsql
	_then
		_return
	_endif

	_for dataset_name _over _self.vmsql_datasets.fast_elements()
	_loop
		_if (dsm << _self.dataset_manager(dataset_name)) _isnt _unset 
		_then
			_if dsm.is_kind_of?(vmsql_manager_mixin) _andif
			    _self.import_vmsql_before_suite? _is _true _andif
			    _self.import_vmsql_before_each_test? _isnt _true
			_then
				_self.import_vmsql_dataset(vmsql_dsm)
			_endif
		_endif
	_endloop
_endmethod
$


_private _method vmsql_database_test_helper.set_up_vmsql()
	##
	## Called from set_up() to import VMSQL db when appropriate.
	##
	_if _self.database_storage_mode _is :vmsql _andif
		_self.import_vmsql_before_each_test? _is _true
	_then
		_for dataset_name _over _self.vmsql_datasets.fast_elements()
		_loop
			_if (dsm << _self.dataset_manager(dataset_name)) _isnt _unset _andif 
				dsm.is_kind_of?(vmsql_manager_mixin)
			_then
				_self.import_vmsql_dataset(dsm)
			_endif
		_endloop
	_endif
_endmethod
$

_private _method vmsql_database_test_helper.import_vmsql_dataset(dataset_manager)
	##
	## Uses import_vmsql_dump() to import the dump for the specified dataset_manager.
	_if dataset_manager.dataset_open?()	
	_then
		_if !msf_debug?! _is _true
		_then
			write(_self.class_name, " closing ",dsm)
		_endif
		dataset_manager.close()
	_endif
	_self.import_vmsql_dump(dataset_manager.name)
	_if !msf_debug?! _is _true
	_then
		write(_self.class_name, " reopening ",vmsql_dsm)
	_endif
	dataset_manager.open(dataset_manager.get_connect_spec())
_endmethod
$

#_method vmsql_database_test_helper.ace_before_checkpoint_name
#	##
#	## Returns a name for the checkpoint created in the ACE Top.
#	##
#	postfix << "_bef"
#	name << write_string(_self.class_name, postfix)
#	_if name.size > 32
#	_then
#		name << write_string(_self.class_name.write_string.subseq(1, 32-postfix.size), postfix)
#	_endif
#	_return name
#_endmethod
#$


_private _method vmsql_database_test_helper.import_vmsql_dump(dataset_name, _optional dump_file)
	##
	## Imports the dump into postgres for the specified dataset.  If the Postgres
	## commandline utility psql is available on this machine then that is used,
	## otherwise we use an ant target.
	##
	file << dump_file.default(_self.vmsql_dump_file_name[dataset_name])
	
	_if _self.is_psql_available?
	_then
		_try _with cond
			_self.import_vmsql_dump_via_psql(dataset_name, file)
			_return
		_when error
			# Try remote
			write("Local import failed: ", cond.report_contents_string)
		_endtry
	_endif
	_self.import_vmsql_dump_via_ant(dataset_name, file)
_endmethod
$


_private _method vmsql_database_test_helper.is_psql_available?
	##
	## Checks whether the Postgres psql commandline utility is available
	##
	available? << _false
	_try
		(status, exit_code) << system.do_command("psql --version")
		_if status _is :exited _andif exit_code = 0
		_then
			available? << _true
		_endif
	_when error
		# Leave available? set to false
	_endtry
	_return available?
_endmethod
$

_private _method vmsql_database_test_helper.import_vmsql_dump_via_psql(dataset_name, dump_file)
	##
	## Uses the Postgres psql commandline utility to import the database dump file
	## for the specified dataset.  Intended to support developers in running
	## database_tests locally on their Windows machines.
	##
	_self.recreate_vmsql_database(dataset_name)
	cmd << "cmd /c psql"
	host << system.getenv("SW_PGHOST")
	_if host _isnt _unset
	_then
		cmd << write_string(cmd, " -h ", host)
	_endif
	port << system.getenv("SW_PGPORT")
	_if port _isnt _unset
	_then
		cmd << write_string(cmd, " -p ", port)
	_endif
	_if (user << system.getenv("SW_PGUSER")) _is _unset
	_then
		user << "smallworld"
		write("Please use env var SW_PGUSER to specify Postgres username.  Using default (smallworld).")
	_endif
	_if (pwd << system.getenv("SW_PGPASSWORD")) _is _unset 
	_then
		pwd << "Smallworld2022"
		write("Please use env var SW_PGPASSWORD to specify Postgres password.  Using default.")
	_endif
	file_path << _self.vmsql_database_dump_file(dump_file)
	cmd << write_string(cmd, " -U ", user, " -d ", dataset_name.write_string, " -f ", file_path)
	write("Importing dump using:")
	write(cmd)
	system.putenv("PGPASSWORD", pwd)
	outstr << internal_text_output_stream.new()
	_block
		_dynamic !output! << outstr
		(status, exit_code) << system.do_command(cmd)
	_endblock
	_if status _isnt :exited _orif exit_code ~= 0
	_then
		write("PSQL output:", %newline, outstr.string)
		condition.raise(:error, :string, write_string("PSQL returned status ", status, " and exit code ", exit_code))
	_endif
_endmethod 

_private _method vmsql_database_test_helper.import_vmsql_dump_via_ant(dataset_name, dump_file)
	##
	## Imports a a dump file named camdb_DATASET_NAME.dump using the
	## import-vmsql-dump ant target.
	##
	_self.recreate_vmsql_database(dataset_name)
	pghost << system.getenv("SW_PGHOST")
	pgdb << dataset_name.write_string
	container_name << write_string("pg-", system.getenv("SW_PGPORT"))
	cmd << rope.new()
	cmd.add_last(_self.ant_executable)
	cmd.add_last("-f")
	cmd.add_last(_self.vmsql_ant_build_xml)
	cmd.add_last(write_string("-D", "sw.pghost=", pghost))
	cmd.add_last(write_string("-D", "postgres.container=", container_name))
	cmd.add_last(write_string("-D", "postgres.database=", pgdb))
	cmd.add_last(write_string("-D", "dumpfile=", dump_file))
	cmd.add_last("import-vmsql-dump")
	write("Importing dump using:")
	write(cmd.join_as_strings(" "))
	system.do_command(cmd.join_as_strings(" "))
_endmethod
$

_private _method vmsql_database_test_helper.vmsql_ant_build_xml
	##
	## Import a a dump file named camdb_DATASET_NAME.dump from the 
	##
	product_path << sw_module_manager.module(_self.module_name).product.directory
	ant_build_file << system.canonicalise(system.pathname_down(product_path, "..", "..", "..", "build_tools", "ant", "vmds_cloud_common.xml"))
	_if _not system.file_exists?(ant_build_file)
	_then
		condition.raise(:warning, :string, write_string("ANT build file does not exist: ", ant_build_file))
	_endif
	_return ant_build_file
_endmethod
$

_private _method vmsql_database_test_helper.vmsql_database_dump_file(dump_file)
	##
	## Works out the local path and filename for a camdb dump for the specified
	## dataset.
	##
	munit_prod_path << smallworld_product.product(:munit).directory
	file << system.pathname_down(munit_prod_path, "..", "..", "build_tools", "vmsql", "dumps", "database_dumps", dump_file)
	_if _not system.file_exists?(file)
	_then
		condition.raise(:error, :string, write_string("Dump file does not exist: ", file))
	_endif
	_return file
_endmethod
$

_private _method vmsql_database_test_helper.dataset_manager(name)
	_for soc _over gis_program_manager.spatial_object_controllers()
	_loop
		_if (dsm << soc.dataset_manager(name)) _isnt _unset
		_then
			_return dsm
		_endif
	_endloop
_endmethod
$


